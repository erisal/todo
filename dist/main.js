(()=>{"use strict";var e={561:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=new Date(e.getTime()),r=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var d=r>0?(n+o(t))%n:o(t);return r*n+d};var n=6e4;function o(e){return e.getTime()%n}e.exports=t.default},734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")},e.exports=t.default},615:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,d.default)(2,arguments);var n=(0,r.default)(e),a=(0,r.default)(t),c=n.getTime()-(0,o.default)(n),s=a.getTime()-(0,o.default)(a);return Math.round((c-s)/l)};var o=a(n(561)),r=a(n(749)),d=a(n(734));function a(e){return e&&e.__esModule?e:{default:e}}var l=864e5;e.exports=t.default},749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,r.default)(1,arguments);var t=(0,o.default)(e);return t.setHours(0,0,0,0),t};var o=d(n(171)),r=d(n(734));function d(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},171:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,r.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))};var o,r=(o=n(734))&&o.__esModule?o:{default:o};e.exports=t.default}},t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(615),t=n.n(e);const o=new Date,r=String(o.getDate()).padStart(2,"0"),d=String(o.getMonth()+1).padStart(2,"0"),a=`${o.getFullYear()}-${d}-${r}`,l=(()=>{let e=function(e){var t;try{t=window.localStorage;var n="__storage_test__";return t.setItem(n,n),t.removeItem(n),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}();return{copyToLocal:function(t){e&&localStorage.setItem("todo",JSON.stringify(t))},getLocal:function(){return e&&""!=JSON.parse(localStorage.getItem("todo"))?JSON.parse(localStorage.getItem("todo")):null},resetLocal:function(){e&&localStorage.setItem("todo",JSON.stringify([]))}}})(),c=(e,t="",n="",o=1,r="open")=>{const d=[];return{getTitle:()=>e,setTitle:t=>e=t,getDescription:()=>t,setDescription:e=>t=e,getDue:()=>n,setDue:e=>n=e,getPriority:()=>o,setPriority:e=>o=e,getStatus:()=>r,toggleStatus:()=>{"open"===r&&(r="closed"),"closed"===r&&(r="open")},getTask:()=>[e,t,n,o,r],addNote:e=>{d.unshift(e)},deleteNote:e=>{d.splice(e,1)}}},s=(e,t="")=>{const n=[];return{getTitle:()=>e,setTitle:t=>e=t,getDescription:()=>t,setDescription:e=>t=e,addTask:e=>{n.push(e)},deleteTask:e=>n.splice(e,1),getTasks:()=>n,exportData:()=>{let t=[e,[]];for(let e=0;e<n.length;e++)t[1].push(n[e].getTask());return t}}},i=(()=>{const e=()=>{let e=[];for(let t=0;t<n.length;t++)e.push(n[t].exportData());return e},t=e=>{let t=[];for(let n=0;n<e.length;n++){let o=s(e[n][0]),r=e[n][1];for(let e=0;e<r.length;e++){let t=r[e][0],n=r[e][1],d=r[e][2],a=r[e][3],l=r[e][4],s=c(t,n,d,a,l);o.addTask(s)}t.push(o)}return t};let n,o=l.getLocal();return n=null==o?[s("General")]:t(o),{addProject:t=>{n.push(t),l.copyToLocal(e())},deleteProject:t=>{n.splice(t,1),l.copyToLocal(e())},getProjects:()=>n,getProject:e=>n[e],updateProject:(t,o)=>{n.splice(t,1,o),l.copyToLocal(e())},exportProjects:e,importProjects:t,numProjects:()=>n.length}})(),u=(()=>{const e=document.querySelector("#content");let n=0,o=i.getProject(n),r=i.getProjects();document.getElementById("addProjectButton").addEventListener("click",(()=>p())),document.getElementById("submitTask").addEventListener("click",(()=>u.dispatchAddTask())),document.getElementById("cancelTaskForm").addEventListener("click",(()=>u.toggleTaskForm())),document.getElementById("submitProjectButton").addEventListener("click",(()=>u.dispatchAddProject())),document.getElementById("cancelProjectForm").addEventListener("click",(()=>u.toggleProjectForm()));const d=t=>{e.innerHTML="",n=t,o=i.getProject(t);const r=document.createElement("div");r.id="categoryHead";const d=document.createElement("div");d.id="categoryTitle",d.textContent=o.getTitle();const a=document.createElement("div");a.id="categoryFunctions";const c=document.createElement("input");c.type="button",c.addEventListener("click",(()=>u.toggleTaskForm())),c.value="+ add task",c.id="addTaskButton",a.appendChild(c);const s=document.createElement("input");s.type="button",s.addEventListener("click",(()=>u.dispatchDelProject(n))),s.value="- delete project",s.id="addTaskButton",a.appendChild(s),r.appendChild(d),r.appendChild(a),e.appendChild(r);let p=o.getTasks();for(let e=0;e<p.length;e++)l(p[e],e);document.getElementById("addTaskForm").setAttribute("data-index",t),e.setAttribute("data-index",t)},l=(n,o)=>{let r=n.getTitle(),d=n.getDue(),l=n.getDescription(),c=document.createElement("div");c.classList.add("taskContainer");let s=document.createElement("div");s.classList.add("taskHead");let i=document.createElement("div");i.classList.add("taskTitle"),""!=l&&(r+=" ..."),i.textContent=r,i.addEventListener("click",(()=>g(o)));let p=document.createElement("div");if(p.classList.add("dueDate"),""!=d){const e=t()(new Date(d),new Date(a));p.textContent=`${e}D left (${d})`}let m=document.createElement("div");m.classList.add("taskFunctions");const f=document.createElement("input");f.type="button",f.addEventListener("click",(()=>u.dispatchDelTask(o))),f.value="- delete",f.classList.add("delTaskButton"),m.appendChild(f);let T=document.createElement("div");T.classList.add("taskBody"),T.id=`taskbody-${o}`;let y=document.createElement("div");y.classList.add("taskDescription"),y.textContent=n.getDescription(),s.appendChild(i),s.appendChild(p),s.appendChild(m),T.appendChild(y),c.appendChild(s),c.appendChild(T),e.appendChild(c)},p=()=>{document.querySelector(".projectWhiteOut").classList.toggle("showProjectForm")},g=e=>{document.getElementById(`taskbody-${e}`).classList.toggle("showTaskBody")};return{renderContent:d,renderMenu:()=>{const e=document.getElementById("projectMenu");e.innerHTML="",document.createElement("div").id="projectHead";for(let t=0;t<r.length;t++){let n=document.createElement("a");n.classList.add("projectLink"),n.href="#",n.addEventListener("click",(()=>d(t))),n.textContent=r[t].getTitle(),n.innerHTML=n.innerHTML+"<br>",e.appendChild(n)}},toggleTaskForm:()=>{document.querySelector(".taskWhiteOut").classList.toggle("showTaskForm")},toggleProjectForm:p,dispatchAddTask:()=>{let e=document.getElementById("newTaskTitle").value;if(""==e)return;console.log("new title: "+e);let t=document.getElementById("newTaskDescription").value,r=document.getElementById("newTaskDue").value,d=document.getElementById("newTaskPriority").value,a=c(e,t,r,d);o.addTask(a),i.updateProject(n,o),u.toggleTaskForm(),document.getElementById("newTaskTitle").value="",document.getElementById("newTaskDescription").value="",document.getElementById("newTaskDue").value="",document.getElementById("newTaskPriority").value="1",u.renderContent(n)},dispatchDelTask:e=>{o.deleteTask(e),i.updateProject(n,o),u.renderContent(n)},dispatchDelProject:e=>{confirm("Are you sure you want to delete this project?")&&(i.deleteProject(e),n=0,u.renderMenu(),u.renderContent(n))},dispatchAddProject:()=>{let e=document.getElementById("newProjectTitle").value,t=document.getElementById("newProjectDescription").value,n=s(e,t);i.addProject(n),u.renderMenu(),u.toggleProjectForm(),d(i.numProjects()-1)}}})();u.renderContent(0),u.renderMenu()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,