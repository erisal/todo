(()=>{const e=(()=>{let e=function(e){var t;try{t=window.localStorage;var o="__storage_test__";return t.setItem(o,o),t.removeItem(o),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}();return{copyToLocal:function(t){e&&localStorage.setItem("todo",JSON.stringify(t))},getLocal:function(){if(e&&""!=JSON.parse(localStorage.getItem("todo"))){let e=JSON.parse(localStorage.getItem("todo"));return console.log("local result: "+e),console.log("is array? "+Array.isArray(e)),console.log("length: "+e.length),console.log(e[0][1]),e}return null},resetLocal:function(){e&&localStorage.setItem("todo",JSON.stringify([]))}}})(),t=(e,t="",o="",n=1,l="open")=>{const s=[];return{getTitle:()=>e,setTitle:t=>e=t,getDescription:()=>t,setDescription:e=>t=e,getDue:()=>o,setDue:e=>o=e,getPriority:()=>n,setPriority:e=>n=e,getStatus:()=>l,toggleStatus:()=>{"open"===l&&(l="closed"),"closed"===l&&(l="open")},getTask:()=>[e,t,o,n,l],addNote:e=>{s.unshift(e)},deleteNote:e=>{s.splice(e,1)}}},o=(e,t="")=>{const o=[];return{getTitle:()=>e,setTitle:t=>e=t,getDescription:()=>t,setDescription:e=>t=e,addTask:e=>{o.push(e)},deleteTask:e=>o.splice(e,1),getTasks:()=>o,exportData:()=>{let t=[e,[]];for(let e=0;e<o.length;e++)t[1].push(o[e].getTask());return console.log(t),t}}},n=(()=>{const n=()=>{let e=[];for(let t=0;t<projectList.length;t++)e.push(projectList[t].exportData());return console.log("exporter: "+e),e},l=e=>{let n=[];for(let l=0;l<e.length;l++){let s=o(e[l][0]),a=e[l][1];for(let e=0;e<a.length;e++){let o=a[e][0],n=a[e][1],l=a[e][2],r=a[e][3],d=a[e][4],c=t(o,n,l,r,d);s.addTask(c)}n.push(s)}return n};let s=e.getLocal();return null==s?(projectList=[o("General")],console.log("blank")):(projectList=l(s),console.log("not blank")),{addProject:t=>{projectList.unshift(t),e.copyToLocal(n())},deleteProject:t=>{projectList.splice(t,1),e.copyToLocal(n())},getProjects:()=>projectList,getProject:e=>projectList[e],updateProject:(t,o)=>{projectList.splice(t,1,o),e.copyToLocal(n())},exportProjects:n,importProjects:l}})(),l=t("Task 1","Description for task 1","2-5-2020",2,"open"),s=t("Task 2","Second Description","2-5-2020",1,"closed"),a=t("Task 3","Third Description of task","2-5-2020",4,"open"),r=o("General 1","First project with tasks"),d=o("Second Project","Description here");r.addTask(l),r.addTask(s),r.addTask(a),d.addTask(a),d.addTask(s),d.addTask(l),n.addProject(d),n.addProject(r),console.log("type of p2 = "+d);const c=(()=>{const e=document.querySelector("#content");let o=0,l=n.getProject(o),s=n.getProjects();console.log("project list length here: "+s.length);const a=t=>{e.innerHTML="",o=t,l=n.getProject(t);const s=document.createElement("div");s.id="categoryHead";const a=document.createElement("div");a.id="categoryTitle",a.textContent=l.getTitle();const d=document.createElement("div"),c=document.createElement("input");c.type="button",c.setAttribute("onclick","renderPage.toggleTaskForm()"),c.value="+ add task",c.id="addTaskButton",d.id="categoryFunctions",d.appendChild(c),s.appendChild(a),s.appendChild(d),e.appendChild(s);let i=l.getTasks();for(let e=0;e<i.length;e++)r(i[e],e);document.getElementById("addTaskForm").setAttribute("data-index",t),e.setAttribute("data-index",t)},r=(t,o)=>{let n=document.createElement("div");n.classList.add("taskContainer");let l=document.createElement("div");l.classList.add("taskHead");let s=document.createElement("div");s.classList.add("taskTitle"),s.textContent=t.getTitle();let a=document.createElement("div");a.classList.add("dueDate"),a.textContent=t.getDue();let r=document.createElement("div");r.classList.add("taskFunctions");const d=document.createElement("input");d.type="button",d.setAttribute("onclick",`renderPage.dispatchDelTask(${o})`),d.value="- delete",d.classList.add("delTaskButton"),r.appendChild(d);let c=document.createElement("div");c.classList.add("taskBody");let i=document.createElement("div");i.classList.add("taskDescription"),i.textContent=t.getDescription(),l.appendChild(s),l.appendChild(a),l.appendChild(r),c.appendChild(i),n.appendChild(l),n.appendChild(c),e.appendChild(n)};return{renderContent:a,renderMenu:()=>{const e=document.getElementById("projectMenu");e.innerHTML="",console.log("project list length here2: "+s.length);for(let t=0;t<s.length;t++){console.log("project list: "+s[0].getTitle()),console.log("stringify: "+JSON.stringify(s));let o=document.createElement("a");o.classList.add("projectLink"),o.href="#",o.addEventListener("click",(()=>a(t))),o.textContent=s[t].getTitle(),o.innerHTML=o.innerHTML+"<br>",e.appendChild(o)}},toggleTaskForm:()=>{document.querySelector(".taskWhiteOut").classList.toggle("showTaskForm")},dispatchAddTask:()=>{let e=document.getElementById("newTaskTitle").value,s=document.getElementById("newTaskDescription").value,a=document.getElementById("newTaskDue").value,r=document.getElementById("newTaskPriority").value,d=t(e,s,a,r);l.addTask(d),n.updateProject(o,l),c.toggleTaskForm(),document.getElementById("newTaskTitle").value="",document.getElementById("newTaskDescription").value="",document.getElementById("newTaskDue").value="",document.getElementById("newTaskPriority").value="1",c.renderContent(o)},dispatchDelTask:e=>{l.deleteTask(e),n.updateProject(o,l),c.renderContent(o),console.log(e)}}})();c.renderContent(0),c.renderMenu()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,